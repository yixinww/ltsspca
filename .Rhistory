devtools::load_all(export_all = FALSE)
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all(export_all = FALSE)
devtools::check()
devtools::load_all(export_all = FALSE)
devtools::check()
zipEscalator <- memCompress(Escalator)
getwd
getwd()
zipEscalator <- memCompress("./data/Escalator.rda")
data("Escalator")
load("C:/Users/wangy/Dropbox/Projects/R packages/ltsspca/ltsspca/data/Escalator.rda")
load("C:/Users/wangy/Dropbox/Projects/R packages/ltsspca/ltsspca/data/Escalator.rda")
save(Escalator,file="escalator.rda",compress="xz")
save(Escalator,file="escalator.rda",compress="bz2")
save(Escalator,file="escalator.rda",compress="bzip2")
save(Escalator,file="escalator.rda",compress="bzip2")
save(Glass,file="Glass.rda",compress="bzip2")
save(glass,file="Glass.rda",compress="bzip2")
save(Glass,file="glass.rda",compress="bzip2")
devtools::load_all(export_all = FALSE)
devtools::check()
devtools::load_all(export_all = FALSE)
devtools::check()
library(ltsspca)
library(ltsspca)
install.packages("devtools")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
install.packages("Rcpp")
devtools::load_all()
install.packages("pracma\")
install.packages("pracma")
devtools::load_all(export_all = FALSE)
devtools::check()
install.packages("knitr")
devtools::check()
install.packages("RcppArmadillo")
devtools::check()
install.packages("robustbase")
install.packages("rrcov")
install.packages("mvtnorm")
install.packages("rmarkdown")
devtools::check()
devtools::build(binary = T)
devtools::load_all(export_all = FALSE)
devtools::check()
install.packages("Rcpp")
install.packages("Rcpp")
devtools::load_all(export_all = FALSE)
devtools::check()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all(export_all = FALSE)
devtools::check()
devtools::build(binary = TRUE)
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all(export_all = FALSE)
devtools::build(binary = TRUE)
R version
version
devtools::load_all(export_all = FALSE)
devtools::build(binary = TRUE)
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all(export_all = FALSE)
devtools::check()
devtools::build(binary = TRUE)
devtools::build()
n <- 150
p <- 200
cont <- 0.1
Sx <- matrix(0,n,p)
for (j in 1:200){
ind <- sample(1:n,size=cont*p)
Sx[ind,j] <- 1
}
heatmap(Sx,Rowv = NA,Colv = NA,col = c("yellow","blue"),
xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
image(1:200,1:150,Sx,Rowv = NA,Colv = NA,col = c("yellow","blue"),
xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
image(1:200,1:150,col = gray((0,21)/32),
xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
image(1:200,1:150,col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
image(1:200,1:150,Sx,col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
image(0:200,0:150,Sx,col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
image(0:200,0:150,t(Sx),col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
image(0:200,0:150,t(1-Sx),col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
image(1:200,1:150,t(1-Sx),col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
grid(0:200,0:150,type="l")
grid(0:200,0:150,lty="l")
grid(0:200,lty="l")
grid(200,lty="l")
image(1:200,1:150,t(1-Sx),col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
grid(200,lty="l")
grid(201,lty="l")
grid(200,lty="l")
grid(200,lty=2)
grid(200,lty=1)
image(1:200,1:150,t(1-Sx),col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations")
grid(201,lty=1)
par(mfrow=c(5,5,1,1))
image(1:200,1:150,t(1-Sx),col = gray((0:21)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
# grid(201,lty=1)
par(mfrow=c(5,5,1,1))
image(1:200,1:150,t(1-Sx),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
# grid(201,lty=1)
setEPS()
postscript(file = "C:/Users/wangy/Dropbox/Projects/Phd Thesis/adsphd-master/chapters/chapter4/figures/outpos01.eps")
par(mfrow=c(5,5,1,1))
image(1:200,1:150,t(1-Sx),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
# grid(201,lty=1)
image(Sx,Rowv = NA,Colv = NA,col = c("yellow","blue"),
xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
dev.off()
warnings()
setEPS()
postscript(file = "C:/Users/wangy/Dropbox/Projects/Phd Thesis/adsphd-master/chapters/chapter4/figures/outpos01.eps")
par(mfrow=c(5,5,1,1))
image(1:200,1:150,t(1-Sx),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
dev.off()
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
setEPS()
postscript(file = "C:/Users/wangy/Dropbox/Projects/Phd Thesis/adsphd-master/chapters/chapter4/figures/outpos01.eps")
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
dev.off()
Sx2 <- matrix(0,n,p)
controw <- cont
ind <- 1:(controw*n)
for (i in 1:length(ind)){
ix <- sample(1:p,size = cont*p/controw,replace = F)
Sx2[ind[i],ix] <- 1
}
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx2),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
setEPS()
postscript(file = "C:/Users/wangy/Dropbox/Projects/Phd Thesis/adsphd-master/chapters/chapter4/figures/outpos04.eps")
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx2),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
dev.off()
Sx3 <- matrix(0,n,p)
controw <- 0.2
ind <- 1:(controw*n)
for (i in 1:length(ind)){
ix <- sample(1:p,size = cont*p/controw,replace = F)
Sx3[ind[i],ix] <- 1
}
#         xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx2),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
#         xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx3),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx3),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
setEPS()
postscript(file = "C:/Users/wangy/Dropbox/Projects/Phd Thesis/adsphd-master/chapters/chapter4/figures/outpos03.eps")
# heatmap(Sx3,Rowv = NA,Colv = NA,col = c("yellow","blue"),
#         xlab = "Variables",ylab = "Observations", margins = c(5,5),scale="none")
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx3),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
dev.off()
Sx4 <- matrix(0,n,p)
controw <- 0.4
ind <- 1:(controw*n)
for (i in 1:length(ind)){
ix <- sample(1:p,size = cont*p/controw,replace = F)
Sx4[ind[i],ix] <- 1
}
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx4),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
setEPS()
postscript(file = "C:/Users/wangy/Dropbox/Projects/Phd Thesis/adsphd-master/chapters/chapter4/figures/outpos02.eps")
par(mar=c(5,5,1,1))
image(1:200,1:150,t(1-Sx4),col = gray((0:25)/32),
xlab = "Variables",ylab = "Observations",cex.lab=1.5)
dev.off()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp('src/MyPcs.cpp')
Rcpp::sourceCpp('src/MyPcs.cpp')
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
Rcpp::sourceCpp('src/MyPcs.cpp')
Rcpp::sourceCpp('src/MyPcs.cpp')
Rcpp::sourceCpp('src/MyPcs2.cpp')
Rcpp::sourceCpp('src/MyclassicalPcs.cpp')
Rcpp::sourceCpp('src/MyclassicalPcs.cpp')
Rcpp::sourceCpp('src/MyclassicalPcs.cpp')
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::check()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::load_all()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::check()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::check()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
install.packages(Rcpp)
install.packages("Rcpp")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::check()
devtools::build(binary = T)
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::load_all()
devtools::check()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::check()
devtools::build()
install.packages("cellWise")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
library(rospca)
evtools::build_vignettes()
devtools::build_vignettes()
devtools::install_github('ramnathv/htmlwidgets')
htmlwidgets::createWidgetId()
devtools::load_all()
devtools::check()
devtools::build()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::load_all()
devtools::check()
devtools::build()
devtools:release()
devtools::release()
devtools::check_rhub()
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
library(Rtools)
devtools::load_all()
library(mvtnorm)
dataM <- dataSim(n = 200, p = 20, bLength = 4, a = c(0.9, 0.5, 0),
SD = c(10, 5, 2), eps = 0, seed = 123)
rm(.Random.seed)
dataM <- dataSim(n = 200, p = 20, bLength = 4, a = c(0.9, 0.5, 0),
SD = c(10, 5, 2), eps = 0, seed = 123)
x <- dataM$data
ltsspcaMI <- ltsspca(x = x, kmax = 5, alpha = 0.5)
ltsspcaMR <- ltsspcaRw(x = x, obj = ltsspcaMI, k = 2, alpha = 0.5)
diagM <- mydiagPlot(x = x, obj = ltsspcaMR, k = 2)
matplot(ltsspcaMR$loadings)
matplot(ltsspcaMR$loadings,type="l")
matplot(ltsspcaMR$loadings,type="b")
matplot(ltsspcaMR$loadings,type="b",ylab="Loadings")
t.start <- Sys.time()
library(mvtnorm)
dataM <- dataSim(n = 200, p = 20, bLength = 4, a = c(0.9, 0.5, 0),
SD = c(10, 5, 2), eps = 0, seed = 123)
x <- dataM$data
ltsspcaMI <- ltsspca(x = x, kmax = 5, alpha = 0.5)
ltsspcaMR <- ltsspcaRw(x = x, obj = ltsspcaMI, k = 2, alpha = 0.5)
matplot(ltsspcaMR$loadings,type="b",ylab="Loadings")
t.end <- Sys.time()
t.end - t.start
matplot(ltsspcaMR$loadings,type="b",ylab="Loadings")
opar <- par(mar=c(1,1,1,1),no.readonly =TRUE)
par(opar)
matplot(ltsspcaMR$loadings,type="b",ylab="Loadings")
on.exit(par(opar))
matplot(ltsspcaMR$loadings,type="b",ylab="Loadings")
matplot(ltspcaMR$loadings)
matplot(ltsspcaMR$loadings)
opar <- par(mar=c(1,1,1,1),no.readonly =TRUE)
par(opar)
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
par(opar)
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
par(opar)
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
on.exit(par(opar))
par(opar)
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
par()
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly =TRUE)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
par()
reset_par()
opar <- par(no.readonly = TRUE)
par <- par(mfrow=c(2,1),no.readonly =TRUE)
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
opar <- par(no.readonly = TRUE)
opar
opar$mfrow
par <- par(mfrow=c(2,1))
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
reset_par()
matplot(ltsspcaMR$loadings)
reset_par()
opar <- par(no.readonly = TRUE)
par <- par(mfrow=c(2,1))
matplot(ltsspcaMR$loadings)
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
par(opar)
matplot(ltsspcaMR$loadings)
opar
opar$mfrow
opar <- par(no.readonly = TRUE)
opar$mfrow
opar <- par(,no.readonly = TRUE)
par()
par()$mfrow
opar <- par(no.readonly = TRUE)
opar$mfrow
par(mfrow=c(2,1))
matplot(ltsspcaMR$loadings)
matplot(ltsspcaMR$loadings)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
opar$mfrow
par(opar)
opar$mfrow
t.start <- Sys.time()
matplot(ltsspcaMR$loadings)
opar <- par(no.readonly = TRUE)
on.exit(par(opar))
matplot(ltsspcaMR$loadings)
matplot(ltsspcaMR$loadings)
opar <- par(no.readonly = TRUE)
on.exit(par(opar))
par(mfrow=c(2,1))
matplot(ltsspcaMR$loadings)
par(opar)
matplot(ltsspcaMR$loadings)
opar <- par(no.readonly = TRUE)
#on.exit(par(opar))
par(mfrow=c(2,1))
matplot(ltsspcaMR$loadings)
par(opar)
matplot(ltsspcaMR$loadings)
opar <- par(mfrow=c(2,1),no.readonly = TRUE)
on.exit(par(opar))
#par(mfrow=c(2,1))
matplot(ltsspcaMR$loadings)
par()
par$mfrow
m <- function(l){
opar <- par(mfrow=c(2,1),no.readonly = TRUE)
on.exit(par(opar))
matplot(l)
}
m(ltsspcaMR$loadings)
matplot(ltsspcaMR$loadings)
#' @title Make diagnostic plot using the estimated PC subspace
#' @param x the input data matrix
#' @param obj the returned output from rwltsspca
#' @param k dimension of the PC subspace
#' @param alpha the robust parameter which takes value between 0 to 0.5, default is 0.5
#' @param co.sd cutoff value for score outlier weight, default is 0.25
#' @return the diagnostics of outliers \cr
#' \item{od}{the orthgonal distances with respect to the k-dimensional PC subspace}
#' \item{ws.od}{if the observation is outlying in the orthgonal complement of the PC subspace \code{ws.od}=0; otherwise \code{ws.sd}=1}
#' \item{co.od}{the cutoff value for orthogonal distances}
#' \item{sc.wt}{the score outlier weight, which is compared with 0.25 (by default) to flag score outliers}
#' \item{ws.sd}{if the observation is outlying with the PC subspace \code{ws.sd}=0; otherwise \code{ws.sd}=1}
#' \item{co.sd}{the cutoff value for score outlier weight, default is 0.25}
#' \item{sc.out}{the retruned object when computing the score outlier weights}
mydiagPlot <- function(x, obj, k, alpha = 0.5, co.sd = 0.25){
ws.od <- obj$ws.od
ws.sd <- obj$ws.sd
xs  <- scale(x, center = obj$mu,scale = F)
od.rw <-  sqrt(apply((xs - (xs %*% obj$loadings[,1:k]) %*% t(obj$loadings[,1:k]))^2,1,sum))
co.od.rw <- coOD(od = od.rw,  h =(dim(x)[1]-floor(((dim(x)[1])*alpha))))$co.od
ws.od.rw <- od.rw <= co.od.rw
iout.new <- IdOUT(obj$scores[,1:k],ws.od=ws.od.rw,outbound=co.sd)
ws.sd.rw <- as.logical(iout.new$wfinal01)
ws00 <- which(ws.sd.rw &  ws.od.rw)
ws10 <- which((!ws.sd.rw ) & ws.od.rw)
ws01 <-  which( ws.sd.rw  & (! ws.od.rw))
ws11 <- which((! ws.sd.rw ) & (!ws.od.rw))
min.od <- min(od.rw)/co.od.rw
max.od <- max(od.rw)/co.od.rw
s.od <- (max.od - max.od) / length(ws00)
opar <- par(mar=c(5,5,5,1),no.readonly = TRUE)
on.exit(par(opar))
plot(iout.new$wfinal[ws00],od.rw[ws00]/co.od.rw,
main = "Diagnostic plot", xlab="Score outlier weight", ylab="Scaled OD", cex.lab = 2, cex.main=2,cex=1.5,
pch=16, col=1,ylim=c((min.od-s.od),(max.od+s.od)),xlim=c(1,0)) +
points(iout.new$wfinal[ws10],od.rw[ws10]/co.od.rw,pch = 18, col= 3,cex=1.5) +
points(iout.new$wfinal[ws01],od.rw[ws01]/co.od.rw,pch = 15, col= 4,cex=1.2) +
points(iout.new$wfinal[ws11],od.rw[ws11]/co.od.rw,pch = 17, col= 2,cex=1.5) +
abline(h=1,v=co.sd)
return(list(od = od.rw, ws.od = ws.od.rw, sc.wt = iout.new$wfinal, ws.sd = ws.sd.rw, co.od = co.od.rw, co.sd = 0.25, sc.out = iout.new))
}
mydiagPlot(x,ltsspcaMR)
mydiagPlot(x,ltsspcaMR,k=2)
devtools::load_all()
devtools::check()
devtools::check()
devtools::build()
load("~/ltsspca/ltsspca/.RData")
load("~/ltsspca/ltsspca/.RData")
remove.packages("ltsspca", lib="~/R/win-library/3.5")
install_github("yixinww/ltsspca")
install_github("yixinww/ltsspca/ltsspca")
library(devtools)
install_github("yixinww/ltsspca")
install_github("yixinww/ltsspca/ltsspca")
usethis::browse_github_pat()
install_github("yixinww/ltsspca/ltsspca")
usethis::browse_github_pat()
usethis::edit_r_environ()
clear(.Random.seed)
rm(.Random.seed)
usethis::edit_r_environ()
install_github("yixinww/ltsspca/ltsspca")
git init
